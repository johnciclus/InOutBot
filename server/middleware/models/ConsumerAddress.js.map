{"version":3,"file":"ConsumerAddress.js","sourceRoot":"","sources":["ConsumerAddress.ts"],"names":[],"mappings":";;;;;;;;;;;;;;YAIM,eAAe,GAAG,kBAAK,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;gBAC7D,UAAU,EAAE,UAAU,KAAK,EAAE,OAAO;gBAoBpC,CAAC;aACF,EAAE;gBACD,WAAW,EAAE,UAAS,KAAK,EAAE,WAAW,EAAE,QAAQ;oBAChD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,6BAAqB,CAAC,WAAW,EAAE,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAA;gBACpF,CAAC;aACF,CAAC,CAAC;iCAEY,eAAe;QAC9B,CAAC","sourcesContent":["import Parse from '../parse'\nimport { loadConsumerAddresses } from '../actions/index';\nimport LatLng from './LatLng'\n\nconst ConsumerAddress = Parse.Object.extend('ConsumerAddress', {\n  initialize: function (attrs, options) {\n    /*\n     id = '';\n     location = new LatLng(0, 0);\n     address = '';\n     description = '';\n     name = '';\n     consumer = {};\n\n     set location(value) {\n     this._location = new LatLng(value.lat, value.lng)\n     }\n\n     get location () { return this._location }\n\n     super('ConsumerAddress', attributes, options);\n     if (attributes && attributes.location)  {\n     this.location = new LatLng(attributes.location.lat, attributes.location.lat)\n     }\n     * */\n  }\n}, {\n  loadInStore: function(store, recipientId, consumer){\n    return store.dispatch(loadConsumerAddresses(recipientId, consumer.rawParseObject))\n  }\n});\n\nexport default ConsumerAddress\n"]}